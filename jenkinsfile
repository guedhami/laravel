pipeline {
    agent any 

    def dockerHubUsername = 'hayder69'
def dockerHubPAT = 'dckr_pat_uQfuQ234dHKEE0vbdTISPMIymPQ'

    stages {
        stage('Clone repository') {
            steps {
                script {
                    // Checkout the Laravel repository
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[credentialsId: 'git', url: 'https://github.com/guedhami/laravel']]])
                }
            }
        }

        stage('Build image') {
            steps {
                script {            
                    docker.withRegistry("https://index.docker.io/v1/", dockerHubPAT) {
                def customImageName = 'test-jenkins'
                def dockerfileDir = '.'
                
                // Build the Docker image
                docker.build(customImageName, "--file=${dockerfileDir}/Dockerfile ${dockerfileDir}")
            }
                }
            }
        }

      
      stage('Push Docker Image') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'hayder69', passwordVariable: 'dckr_pat_uQfuQ234dHKEE0vbdTISPMIymPQ')]) {
            sh '''
                # Use DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD in your Docker commands
                sudo docker login -u $hayder69 -p $dckr_pat_uQfuQ234dHKEE0vbdTISPMIymPQ
               
            '''
        }
        script {
                // Push the Docker image to Docker Hub using the credentials
                def dockerPushCommand = [
                    'docker',
                    'push',
                    'test-jenkins'  // Replace with your image name and tag
                ]

                // Execute the Docker push command based on the agent's OS
                if (isUnix()) {
                    sh script: dockerPushCommand.join(' '), returnStatus: true
                }

                if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                    echo 'Docker image pushed successfully.'
                } else {
                    error 'Docker image push failed.'
                }
            }
    }
    }
}
}